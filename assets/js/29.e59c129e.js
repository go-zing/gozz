(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{313:function(t,e,s){"use strict";s.r(e);var n=s(10),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"how-it-works"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[t._v("#")]),t._v(" How It Works")]),t._v(" "),e("p",[t._v("The main workflow of "),e("code",[t._v("Gozz")]),t._v(" in shortï¼š")]),t._v(" "),e("p",[t._v("Collects all rule match comments as annotations and setup context meta-info.\nPlugins would use these entities to do extra analysis and do stuffs.")]),t._v(" "),e("p",[t._v("To understand how these annotated objects were analyzed.\nWe should have knowledge about "),e("code",[t._v("Golang AST")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"what-is-ast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-ast"}},[t._v("#")]),t._v(" What is "),e("code",[t._v("AST")])]),t._v(" "),e("p",[e("strong",[t._v("Abstract Syntax Tree")]),t._v(", it was a kind of structured presentation of codes.\nMost of the programing languages would parse codes into "),e("code",[t._v("AST")]),t._v(" object before execute or compile.\nIt is also a middle-state between Golang codes and executable binary.")]),t._v(" "),e("p",[t._v("After parsed codes as "),e("code",[t._v("AST")]),t._v(", we could treat codes like a structured object, to walk nodes,\nvisit and detect node expression and do programing modify or analysis.\nIt would provide more flexibility than treat codes as text.")]),t._v(" "),e("p",[t._v("Golang provide official syntax parser "),e("code",[t._v("go/ast")]),t._v(" library,\nso we can get "),e("code",[t._v("AST")]),t._v(" as same as compiler,\nalso Golang provide "),e("code",[t._v("go/format")]),t._v(" to convert "),e("code",[t._v("AST")]),t._v(" into formatted text,\nthat bring great convenience for Golang toolkit ecosystem.")]),t._v(" "),e("p",[t._v("Common tools used by gopher such as "),e("code",[t._v("gofmt")]),t._v(" / "),e("code",[t._v("golangci-lint")]),t._v(" was mainly based on "),e("code",[t._v("go/ast")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"golang-ast-in-short"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#golang-ast-in-short"}},[t._v("#")]),t._v(" Golang AST in short")]),t._v(" "),e("p",[t._v("In "),e("code",[t._v("Golang AST")]),t._v(", we can consider most of the codes blocks below "),e("code",[t._v("package")]),t._v(" as "),e("code",[t._v("Decl")]),t._v(" (declaration).")]),t._v(" "),e("p",[e("code",[t._v("Decl")]),t._v(" has two types: "),e("code",[t._v("GenDecl")]),t._v(" (generic declaration) and "),e("code",[t._v("FuncDecl")]),t._v(" (function declaration).")]),t._v(" "),e("p",[t._v("Except for "),e("code",[t._v("func")]),t._v(", most of the declarations are "),e("code",[t._v("GenDecl")]),t._v(".")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" x\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go/ast"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" A "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tB  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\tB2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" C "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tD  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tD2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" E "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tF  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\tF2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FuncDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("G")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("Codes object in "),e("code",[t._v("GenDecl")]),t._v(" blocks would be called "),e("code",[t._v("Spec")]),t._v(",\nwith types "),e("code",[t._v("TypeSpec / ValueSpec / ImportSpec")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("Spec")]),t._v(" does not contains keywords token,\nbut type of "),e("code",[t._v("Spec")]),t._v(" is decided by keywords ahead ("),e("code",[t._v("const/var/import/type")]),t._v(").")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" x\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ImportSpec")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go/ast"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" A "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n\tB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n\tB2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" C "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpec")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpec")]),t._v("\n\tD "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpec")]),t._v("\n\tD2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" E "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDecl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tF  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n\tF2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpec")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("Golang would relate comments to neighboring object, and according to their position,\ncomments could be divided into "),e("code",[t._v("Doc")]),t._v(" or "),e("code",[t._v("Comment")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("Doc")]),t._v(" is comments on object, and "),e("code",[t._v("Comment")]),t._v(" is comments behind object.")]),t._v(" "),e("p",[e("code",[t._v("Decl")]),t._v(" objects only got "),e("code",[t._v("Doc")]),t._v(", while "),e("code",[t._v("Spec")]),t._v(" objects have both "),e("code",[t._v("Doc")]),t._v(" and "),e("code",[t._v("Comment")]),t._v(".")]),t._v(" "),e("p",[t._v("You can check out the detect principle in "),e("RouterLink",{attrs:{to:"/guide/plugins/doc.html#example-02"}},[t._v("Doc Example 2")])],1),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" x\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDeclDoc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ImportSpecDoc")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go/ast"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ImportSpecComment")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDeclDoc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" A "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ValueSpecComment")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GenDeclDoc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpecDoc")]),t._v("\n\tB "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpecComment")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeSpecDoc")]),t._v("\n\tB2 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FuncDeclDoc")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"annotations-analysis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotations-analysis"}},[t._v("#")]),t._v(" Annotations Analysis")]),t._v(" "),e("h3",{attrs:{id:"syntax-analysis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax-analysis"}},[t._v("#")]),t._v(" Syntax Analysis")]),t._v(" "),e("p",[t._v("Before plugin execute, CLI core would parse files object comments and match comments from "),e("code",[t._v("AST")]),t._v(".\nComments would be split in lines and seperated into annotations or documents.")]),t._v(" "),e("p",[t._v("All object with annotations would be collected as "),e("code",[t._v("AnnotationDecl")]),t._v("\n( mainly "),e("code",[t._v("Spec")]),t._v(" object except from "),e("code",[t._v("FuncDecl")]),t._v(").\nAnd all these opened file info and parsed "),e("code",[t._v("AST")]),t._v(" would be cached in memory.")]),t._v(" "),e("h3",{attrs:{id:"annotations-parse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotations-parse"}},[t._v("#")]),t._v(" Annotations Parse")]),t._v(" "),e("p",[t._v("Before "),e("code",[t._v("AnnotationDecl")]),t._v(" pass into plugin execution,\ncore would parse "),e("code",[t._v("AnnotationDecl")]),t._v("'s annotations with plugin name in lines.\n"),e("code",[t._v("AnnotationDecl")]),t._v(" may have several plugin-match annotations.")]),t._v(" "),e("p",[t._v("Every matched annotations would be parsed into exact and optional arguments,\nand merged with CLI command extend options.\nAt last combined with "),e("code",[t._v("AnnotationDecl")]),t._v(" as "),e("code",[t._v("DeclEntity")]),t._v(" object.")]),t._v(" "),e("p",[t._v("The core method of every plugin is how to make use of these matched "),e("code",[t._v("DeclEntity")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"process-runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process-runtime"}},[t._v("#")]),t._v(" Process Runtime")]),t._v(" "),e("p",[t._v("We could specify multi plugins in order in a command. Example:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("gozz run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"api"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"impl"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doc"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wire"')]),t._v(" ./\n")])])]),e("p",[e("code",[t._v("Gozz")]),t._v(" would do analysis before every plugin execute,\nbecause previous plugin may modify or generate files.")]),t._v(" "),e("p",[t._v("But previous analysis would cache files and parsed results.\nThese caches may be reused only if file not modified.\nTherefore, use multi plugins could get maximum reuse of parser cache,\nand get better performance than split plugins in single run.")])])}),[],!1,null,null,null);e.default=a.exports}}]);