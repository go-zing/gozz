// Code generated by gozz:api. DO NOT EDIT.

package api

import (
	context "context"
)

var _ = context.Context(nil)

type Apis struct {
	BookService BookService
}

func (s Apis) Range(fn func(interface{}, []map[string]interface{})) {
	for _, f := range []func() (interface{}, []map[string]interface{}){
		s._BookService,
	} {
		fn(f())
	}
}

func (s Apis) _BookService() (interface{}, []map[string]interface{}) {
	t := s.BookService
	return t, []map[string]interface{}{
		{
			"doc":      "List all books. return ListBook",
			"method":   "get",
			"resource": "",
			"name":     "List",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in QueryBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.List(ctx, in)
			},
		},
		{
			"doc":      "Get book by book id. returns DataBook",
			"method":   "get",
			"resource": "{id}",
			"name":     "Get",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in QueryBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.Get(ctx, in)
			},
		},
		{
			"doc":      "Create new book from FormBook. returns DataBook created",
			"method":   "post",
			"resource": "",
			"name":     "Create",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in FormBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.Create(ctx, in)
			},
		},
		{
			"doc":      "Edit book by id from FormBook. returns DataBook edited",
			"method":   "put",
			"resource": "{id}",
			"name":     "Edit",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in FormBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.Edit(ctx, in)
			},
		},
	}
}
