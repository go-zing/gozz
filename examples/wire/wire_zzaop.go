// Code generated by gozz:wire. DO NOT EDIT.

package wire

import (
	"context"
)

type _aop_interceptor interface {
	Intercept(v interface{}, name string, params, results []interface{}) (func(), bool)
}

// Service
type (
	_aop_Service      Service
	_impl_aop_Service struct{ _aop_Service }
)

func (i _impl_aop_Service) Query(p0 context.Context, p1 int64) (r0 string, r1 error) {
	if t, x := i._aop_Service.(_aop_interceptor); x {
		if up, ok := t.Intercept(i._aop_Service, "Query",
			[]interface{}{&p0, &p1},
			[]interface{}{&r0, &r1},
		); up != nil {
			defer up()
		} else if !ok {
			return
		}
	}
	return i._aop_Service.Query(p0, p1)
}
