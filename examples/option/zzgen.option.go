// Code generated by gozz:option. DO NOT EDIT.

package option

import (
	"context"
	"io"
	"net/http"
)

// apply functional options for *Request
func (o *Request) apply(opts ...func(*Request)) {
	for _, opt := range opts {
		opt(o)
	}
}

// add request header
func WithHeader(v http.Header) func(*Request) { return func(o *Request) { o.Header = v } }

func WithHost(v func(closer struct {
	s io.Closer
	context.Context
	dd map[string]interface {
		http.Handler
	}
})) func(*Request) {
	return func(o *Request) { o.Host = v }
}

func WithPort(v string) func(*Request) { return func(o *Request) { o.Port = v } }

func WithUser(v string) func(*Request) { return func(o *Request) { o.User = v } }

func WithPassword(v string) func(*Request) { return func(o *Request) { o.Password = v } }

// apply functional options for *Client
func (o *Client) apply(opts ...func(*Client)) {
	for _, opt := range opts {
		opt(o)
	}
}

// add request header
func WithHeader2(v http.Header) func(*Client) { return func(o *Client) { o.Header = v } }

// some host
func WithHost2(v string) func(*Client) { return func(o *Client) { o.Host = v } }
